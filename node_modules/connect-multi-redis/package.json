{
  "name": "connect-multi-redis",
  "version": "0.2.0",
  "author": {
    "name": "Robert Kowalski",
    "email": "rok@kowalski.gd"
  },
  "description": "Manages multiple redis hosts for sessions",
  "main": "index.js",
  "scripts": {
    "test": "make"
  },
  "dependencies": {
    "connect-redis": "1.4.5"
  },
  "devDependencies": {
    "connect": "2.7.3",
    "chai": "1.4.x",
    "mocha": "1.8.1",
    "supertest": "0.4.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/robertkowalski/connect-multi-redis"
  },
  "bugs": {
    "url": "https://github.com/robertkowalski/connect-multi-redis/issues"
  },
  "keywords": [
    "redis",
    "connect",
    "express",
    "session"
  ],
  "license": "MIT",
  "readme": "[![Build Status](https://travis-ci.org/robertkowalski/connect-multi-redis.png?branch=master)](https://travis-ci.org/robertkowalski/connect-multi-redis)\n\n## connect-multi-redis\n\nManages multiple redis host fallbacks for sessions.\n\nOnce the connection to the current host fails, it choses another connected host, preventing the app from crashing.\n\nIf no redis hosts are connected it degrades to the builtin MemoryStore.\n\nIt also uses the MemoryStore if no config was provided.\n\n### Usage:\n\nPlace the middleware before the session-middleware of Connect or Express\n\n#### Connect:\n\n```javascript\n\nvar connect = require('connect');\nvar http = require('http');\nvar RedisStore = require('connect-redis')(connect);\n\nvar options = {\n  hosts: [\n    new RedisStore({\n      host: '127.0.0.1',\n      port: 63793,\n      maxAge: null\n    }),\n    new RedisStore({\n      host: '127.0.0.1',\n      port: 63793,\n      maxAge: null\n    }),\n  ],\n  session_secret: 'foo',\n  cookie: {\n    maxAge: null\n  }\n};\n\nvar app = connect();\n\nvar multipleRedisSessions = require('connect-multi-redis')(app, connect.session);\n\napp\n  .use(connect.cookieParser(options))\n  .use(multipleRedisSessions())\n  .use(connect.session({ store: options.hosts[0], secret: options.session_secret }))\n  .use(function(req, res) {\n    res.end('Hello World');\n  });\n\nvar server = http.createServer(app).listen(3000);\n\n```\n\n#### Express:\n\n```javascript\n\nvar app = require('express');\nvar http = require('http');\nvar RedisStore = require('connect-redis')(express);\n\nvar options = {\n  hosts: [\n    new RedisStore({\n      host: '127.0.0.1',\n      port: 63793,\n      maxAge: null\n    }),\n    new RedisStore({\n      host: '127.0.0.1',\n      port: 6379,\n      maxAge: null\n    }),\n  ],\n  session_secret: 'foo',\n  cookie: {\n    maxAge: null\n  }\n};\n\nvar multipleRedisSessions = require('connect-multi-redis')(app, express.session);\n\nvar app = express();\n\napp.configure(function() {\n  app.set('port', process.env.PORT || 3000);\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n  app.use(express.favicon());\n  app.use(express.logger('dev'));\n  app.use(express.bodyParser());\n  app.use(express.cookieParser(env.COOKIE_SECRET || 'lolcat'));\n  app.use(multiRedis(options));\n  app.use(express.session({ store: options.hosts[0], secret: env.SESSION_SECRET || 'lolcat' }));\n  app.use(app.router);\n});\n\napp.get('/', function(req, res){\n  res.send('hello world');\n});\n\nhttp.createServer(app).listen(app.get('port'), function() {\n  console.log(\"Express server listening on port \" + app.get('port'));\n});\n\n```",
  "readmeFilename": "README.md",
  "_id": "connect-multi-redis@0.2.0",
  "_from": "connect-multi-redis@0.2.x"
}
